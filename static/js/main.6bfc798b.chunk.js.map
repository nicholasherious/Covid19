{"version":3,"sources":["components/TopBar.js","api/Api.js","components/MainContent.js","components/Footer.js","components/HeadBar.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","data","confirmed","recovered","deaths","lastUpdate","className","align","Grid","divided","Row","columns","Column","Statistic","color","Value","value","Label","URL","fetchData","a","axios","get","modifiedData","fetchDailyData","modifiedDailyData","map","item","total","date","reportDate","MainContent","useState","dailyData","setDailyData","useEffect","dailyDataFetcher","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","Footer","href","HeadBar","Header","as","Wrapper","setData","dataFetcher","Divider","horizontal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bfc798b.chunk.js","sourcesContent":["import React from 'react';\nimport { Grid, Statistic } from 'semantic-ui-react';\nimport './TopBar.css'\n\nconst TopBar = (props) => {\n  if(!props.data) {\n    return 'Loading...'\n  }\n  const { confirmed, recovered, deaths, lastUpdate } = props.data\n\n  return (\n    \n      <div className=\"topbar\" align=\"center\">\n      <Grid divided=\"vertically\">\n      <Grid.Row columns={3}>\n        <Grid.Column>\n          <Statistic color=\"blue\">\n            <Statistic.Value>{confirmed.value}</Statistic.Value>\n            <Statistic.Label>Infected</Statistic.Label>\n          </Statistic>\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic color=\"green\">\n            <Statistic.Value>{recovered.value}</Statistic.Value>\n            <Statistic.Label>Recovered</Statistic.Label>\n          </Statistic>\n        </Grid.Column>\n        <Grid.Column>\n          <Statistic color='red'>\n            <Statistic.Value>{deaths.value}</Statistic.Value>\n            <Statistic.Label>Deaths</Statistic.Label>\n          </Statistic>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    </div>\n   \n    \n  );\n}\n\nexport default TopBar;\n","import axios from 'axios';\n\nconst URL = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async () => {\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(URL);\n    const modifiedData = {\n      confirmed,\n      recovered,\n      deaths,\n      lastUpdate,\n    };\n    return modifiedData;\n    \n  } catch (error) {}\n  \n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${URL}/daily`)\n        const modifiedDailyData = data.map(item => ({\n            confirmed: item.confirmed.total,\n            deaths: item.deaths.total,\n            date: item.reportDate,\n        }))\n\n        return modifiedDailyData\n    } catch (error) {\n        \n    }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../api/Api';\n\nfunction MainContent() {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n    const dailyDataFetcher = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    dailyDataFetcher();\n  }, []);\n\n  const lineChart = (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: 'Infected',\n            borderColor: '#3333ff',\n            fill: true,\n          },\n          {\n            data: dailyData.map(({ deaths }) => deaths),\n            label: 'Deaths',\n            borderColor: 'red',\n            backgroundColor: 'rgba(255, 0, 0, 0.5',\n            fill: true,\n          },\n        ],\n      }}\n    />\n  );\n\n  return <div>{lineChart}</div>;\n}\n\nexport default MainContent;\n","import React from 'react';\n\nfunction Footer() {\n  return (\n\n  \n  <div>Designed by Nicholas <a href=\"https://github.com/nicholasherious\">Nicholas Herious</a>{' '} api by <a href=\"https://covid19.mathdro.id/\">Mathdro</a></div>\n  \n  )\n}\n\nexport default Footer;\n","import React from 'react';\nimport { Header } from 'semantic-ui-react';\nimport './HeadBar.css'\n\nfunction HeadBar() {\n  return (\n    <div className=\"headBar\">\n      <div>\n        <Header as=\"h1\">COVID-19</Header>\n      </div>\n    </div>\n  );\n}\n\nexport default HeadBar;\n","import React, { useState, useEffect } from 'react';\nimport TopBar from './TopBar';\nimport MainContent from './MainContent';\nimport './Container.css';\nimport { Container, Divider } from 'semantic-ui-react';\nimport { fetchData } from '../api/Api';\nimport Footer from './Footer';\nimport HeadBar from './HeadBar'\n\n\nfunction Wrapper() {\n  const [data, setData] = useState()\n\nuseEffect(() => {\n  const dataFetcher = async () => {\n    const data = await fetchData();\n    setData(data)\n  }\n  dataFetcher();\n}, [])\n// console.log(data)\n  return (\n    \n    <Container>\n      <HeadBar />\n      <TopBar data={data} />\n      <Divider horizontal>Stats Updated Daily</Divider>\n      <MainContent />\n      <Footer />\n    </Container>\n  );\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n  return (\n    <div>\n      <Wrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}